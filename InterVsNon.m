for i=1:1
theta1=unifrnd(0,pi/2);
theta2=unifrnd(0,pi/2);
theta3=unifrnd(0,pi/2);
    %ffpsi = @(t,q) psiArbiterv2(q(1),q(2),q(3),t,t,t,.005,0.01,0.01,0.5,0,pi*0.15,pi*0.45,pi.*(1/2.*i.*1/100));
    ffpsi = @(t,q) psiArbiterv2(q(1),q(2),q(3),t,t,t,.005,0.01,0.01,1,theta1,theta2,theta3,pi.*(1/6));
% first three angles are mixing, last one is the interaction
% minus corresponds to cosine and plus corresponds to sine
% so if you want it moving to the right, maximize minus so small theta
% so if you want it moving to the left, maximize plus so theta approx pi/2
% If you want it stationary set theta equal to pi/4
%  rho2 = @(t,q) subsref(ffpsi(t,q), struct('type', '()', 'subs', {{1}}));
% ffpsi(1,2)
% tspan = [0 5];
% q10 = -1;
% [t1,q1] = ode113(@(t1,q1) rho2(t1,q1),tspan,q10);
% plot(t1,q1)
% Check compatability conditions
rho = @(t,q) abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j100 = @(t,q) abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j010 = @(t,q) abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j001 = @(t,q) abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            + abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsi(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
v100 = @(t,q) sntrajcut(t,q).*j100(t,q)/rho(t,q);
v010 = @(t,q) sntrajcut(t,q).*j010(t,q)/rho(t,q);
v001 = @(t,q) sntrajcut(t,q).*j001(t,q)/rho(t,q);
tspan = [0 1];
q10 =0+sqrt(0.005)*randn(1);
q20 = -1.5 +(0.1)*randn(1);
q30 = 0.5+(0.1)*randn(1);
%q10 =-0.0737;
%q20 = -1.527;
%q30 = 0.45169;
%q10 =-0.016536;
%q20 = -1.6057;
%q30 = 0.47159;
%REMEMBER TO CHANGE THE MEANS IN YOUR INITIAL DATA TOO
init_pos = [q10,q20,q30];
velocity = @(t,pos) [v100(t,pos),v010(t,pos),v001(t,pos)]';
[time,position] = ode45(@(t,pos) velocity(t,pos),tspan,init_pos);
% [t2,q2] = ode113(@(t2,q2) v010(t2,q2),tspan,q20);
% [t3,q3] = ode113(@(t3,q3) v001(t3,q3),tspan,q30);

plot(position,time)

title(['pos=' num2str(q10) ',' num2str(q20) ',' num2str(q30) ', theta=' num2str(theta1) ',' num2str(theta2) ',' num2str(theta3)])
hold on
ffpsin = @(t,q) psiArbiternonv2(q(1),q(2),q(3),t,t,t,.005,0.01,0.01,1,theta1,theta2,theta3,pi.*(1/6));
rhon = @(t,q) abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j100n = @(t,q) abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j010n = @(t,q) abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{8}})))^2;
        
j001n = @(t,q) abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{1}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{2}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{3}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{4}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{5}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{6}})))^2 ...
            + abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{7}})))^2 ...
            - abs(subsref(ffpsin(t,q), struct('type', '()', 'subs', {{8}})))^2;
v100n = @(t,q) j100n(t,q)/rhon(t,q);
v010n = @(t,q) j010n(t,q)/rhon(t,q);
v001n = @(t,q) j001n(t,q)/rhon(t,q);
velocityn = @(t,pos) [v100n(t,pos),v010n(t,pos),v001n(t,pos)]';
[timen,positionn] = ode45(@(t,pos) velocityn(t,pos),tspan,init_pos);
plot(positionn,timen)
%saveas(gcf,['IntTraj' num2str(i+2) '.png'])
hold off
end